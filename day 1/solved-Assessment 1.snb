{"metadata":{"name":"Assessment 1","user_save_timestamp":"1970-01-01T00:00:00.000Z","auto_save_timestamp":"1970-01-01T00:00:00.000Z","language_info":{"name":"scala","file_extension":"scala","codemirror_mode":"text/x-scala"},"trusted":true,"customLocalRepo":"/root/.ivy2","customRepos":null,"customDeps":["org.twitter4j % twitter4j-stream % 4.0.4","com.typesafe.akka %% akka-http-core-experimental % 2.0-M2","com.typesafe.akka %% akka-http-spray-json-experimental % 2.0-M2","org.apache.spark %% spark-streaming-kafka % _","- org.apache.spark %% spark-streaming % _","- javax.jms % jms % _","- com.sun.jdmk % jmxtools % _","- com.sun.jmx %jmxri % _"],"customImports":null,"customArgs":null,"customSparkConf":{"spark.executor.memory":"1024m","spark.cassandra.connection.host":"127.0.0.1","spark.cores.max":"2","spark.master":"local[*]"}},"cells":[{"metadata":{"id":"2A864C099A53459FB81AA4E0E1341763"},"cell_type":"markdown","source":"# Assessment #1"},{"metadata":{"id":"5841881486F74134BD490A71D4CFE0DF"},"cell_type":"markdown","source":"## Context"},{"metadata":{"id":"45D4C5E1BDB04CD588DC72EE0BF2F7F4"},"cell_type":"markdown","source":"In this exercise, you'll connect to the twitter stream and consumer sample tweets that you'll strip and forward to the new Kafka topic `tweets`."},{"metadata":{"id":"394FB3CF53D74129A5C5BADE33380005"},"cell_type":"markdown","source":"## Tasks"},{"metadata":{"id":"9DC84F487D8D47F8AE55AB1A3056BBB2"},"cell_type":"markdown","source":"* create kafka topic (from the shell, check `create.sh` for an example)\n* create Twitter auth info [here](https://apps.twitter.com/app/new)\n* use Kafka API to create a producer\n* update Akka actor definition to process tweets and produce to Kafka\n* create an instance of the actor\n* use [Twitter4J](http://twitter4j.org/en/index.html) to stream a sample of the tweets\n* send incoming tweets to the actor"},{"metadata":{"id":"AAD6D1B362A54A7EB86B2D072F3DAD01"},"cell_type":"markdown","source":"## Setup"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"A602A02530D645E29000005A08A28E43"},"cell_type":"code","source":"sparkContext.stop()","outputs":[{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":1}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"82566D47B90D44DCB0D6E0980C88AE0D"},"cell_type":"code","source":"import twitter4j._","outputs":[{"name":"stdout","output_type":"stream","text":"import twitter4j._\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":2}]},{"metadata":{"id":"5508C2CB94984F858D2BE51330273EE3"},"cell_type":"markdown","source":"## Log"},{"metadata":{"id":"A3392247A064463A8C9094E6A5FDD6B3"},"cell_type":"markdown","source":"The following creates a `<ul>` list to which can be appended some tweets, which confirms the process is continuing.\n\n> **Note**: in the following, you'll see that only ~ $\\frac{1}{1000}$ will be rendered."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"755295D37D2244ED8AEACE0708A8250B"},"cell_type":"code","source":"val list = ul(20)\nlist","outputs":[{"name":"stdout","output_type":"stream","text":"list: notebook.front.DataConnectedWidget[String]{implicit val singleCodec: notebook.Codec[play.api.libs.json.JsValue,String]; def data: Seq[String]; def data_=(x$1: Seq[String]): Unit; lazy val toHtml: scala.xml.Elem; def append(s: String): Unit; def appendAll(s: Seq[String]): Unit} = <anon$1 widget>\nres23: notebook.front.DataConnectedWidget[String]{implicit val singleCodec: notebook.Codec[play.api.libs.json.JsValue,String]; def data: Seq[String]; def data_=(x$1: Seq[String]): Unit; lazy val toHtml: scala.xml.Elem; def append(s: String): Unit; def appendAll(s: Seq[String]): Unit} = <anon$1 widget>\n"},{"metadata":{},"data":{"text/html":"<ul data-bind=\"foreach: value\">\n      <li data-bind=\"html: $data\"></li><script data-this=\"{&quot;valueId&quot;:&quot;anon076046c7833ac10e5c21e3bad41943f1&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n          /*]]>*/</script></ul>"},"output_type":"execute_result","execution_count":3}]},{"metadata":{"id":"AE7DCF73FAD640E38DA5695436AD9D38"},"cell_type":"markdown","source":"## Collector"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"A086CA4B628D4F9C9AB5C1F6388C7076"},"cell_type":"code","source":"import akka.actor.Actor\nimport akka.actor.ActorLogging","outputs":[{"name":"stdout","output_type":"stream","text":"import akka.actor.Actor\nimport akka.actor.ActorLogging\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":5}]},{"metadata":{"id":"ECCFA8D8A8E447948EC7D986F8A72354"},"cell_type":"markdown","source":"Utils to create a producer to the kafka cluster"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"93FF93615F384C0FA52C5EEB5F9593C6"},"cell_type":"code","source":"object Utils {\n  import java.util.Properties\n  import org.apache.kafka.clients.producer.{KafkaProducer,ProducerConfig}\n\n  def createProducer:KafkaProducer[String, String] = {\n    val kafkaIP = \"localhost\"\n    val props = new Properties()\n    props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, s\"${kafkaIP}:9092\")\n    props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, \"org.apache.kafka.common.serialization.StringSerializer\")\n    props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, \"org.apache.kafka.common.serialization.StringSerializer\")\n    val producer = new KafkaProducer[String, String](props)\n    producer\n  }\n}","outputs":[{"name":"stdout","output_type":"stream","text":"defined module Utils\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":4}]},{"metadata":{"id":"71C634D7D26840DF8444AA82377EBD5F"},"cell_type":"markdown","source":"The actor definition.\n\n**Important** the data needs to be published as comma separated values with these information:\n* fetched (current) timestamp\n* user name\n* tweet text"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"1EFA34B1189A42D6BC0AF74F54607B4B"},"cell_type":"code","source":"class TweetsCollector() extends Actor with ActorLogging {\n  import org.apache.kafka.clients.producer.ProducerRecord\n\n  val producer = Utils.createProducer\n  \n  override def preStart() = {}\n  \n  def toData(status: twitter4j.Status):String = {\n    val name = status.getUser().getScreenName()\n    val text = status.getText()\n    s\"${System.currentTimeMillis},${name},${text}\" // name,text\n    // @todo: probably shouldn't use , as a seperator since text message may contain them...\n  }\n \n  def receive = {\n    case status: twitter4j.Status => \n      val d = toData(status)\n      if (scala.util.Random.nextDouble < 0.001) list.append(d)\n      \n      producer.send(new ProducerRecord[String, String](\"twitter\", null, d))\n  } \n}","outputs":[{"name":"stdout","output_type":"stream","text":"defined class TweetsCollector\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":6}]},{"metadata":{"id":"67F0D0F9C7AF422C8C1F8CF68D214FB8"},"cell_type":"markdown","source":"Create Actor System which will allow actor creation and message dispatching."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"4B33E4A568DC418284524AFB2A6F7225"},"cell_type":"code","source":"implicit val system:akka.actor.ActorSystem = akka.actor.ActorSystem()","outputs":[{"name":"stdout","output_type":"stream","text":"system: akka.actor.ActorSystem = akka://default\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":7}]},{"metadata":{"id":"0DDCA796FE084733BD718B512B63A836"},"cell_type":"markdown","source":"Create an instance of the `TweetsCollector` actor."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"49422883ED98439EB97E3BDFB63ABA02"},"cell_type":"code","source":"import system.dispatcher\nimport akka.actor.Props\nval streamActor:akka.actor.ActorRef = system.actorOf(Props(new TweetsCollector()))","outputs":[{"name":"stdout","output_type":"stream","text":"import system.dispatcher\nimport akka.actor.Props\nstreamActor: akka.actor.ActorRef = Actor[akka://default/user/$a#-1134334380]\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":9}]},{"metadata":{"id":"2CB1A5AFA7424023A55A4F56B81F5182"},"cell_type":"markdown","source":"## Twitter Stream"},{"metadata":{"id":"F50FF9EFBA7246E98C75132D5B590430"},"cell_type":"markdown","source":"Create a Twitter Stream and a listener that will have to produce incoming tweets to the actor reference."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"16758BF1E4B3469C902CB805A6E763B4"},"cell_type":"code","source":"val twitterStream = new TwitterStreamFactory().getInstance()\nval listener = new StatusListener() {\n    def onStatus(status: Status) {\n      streamActor ! status // send to actor, check http://doc.akka.io/api/akka/2.4.2/#akka.actor.ActorRef\n    }\n    def onDeletionNotice(statusDeletionNotice: StatusDeletionNotice) {}\n    def onTrackLimitationNotice(numberOfLimitedStatuses: Int) {}\n    def onException(ex:java.lang.Exception) {\n        ex.printStackTrace()\n    }\n    def onScrubGeo(lat: Long, long: Long){}\n  def onStallWarning(s: twitter4j.StallWarning) {}\n}\ntwitterStream.addListener(listener)","outputs":[{"name":"stdout","output_type":"stream","text":"twitterStream: twitter4j.TwitterStream = TwitterStreamImpl{http=twitter4j.HttpClientImpl@72f4b585, lifeCycleListeners=[], handler=null, stallWarningsGetParam='stall_warnings=true', stallWarningsParam=PostParameter{name='stall_warnings', value='true', file=null, fileBody=null}, streamListeners=[$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$anon$1@1fb969b9]}\nlistener: twitter4j.StatusListener = $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$anon$1@1fb969b9\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":10}]},{"metadata":{"id":"84BBCED4A7414A6E87AEE2518DCCF6D0"},"cell_type":"markdown","source":"**Important** Use the following form to authenticate the above stream to Twitter.\n\nYou'll have to have a twitter account and to [**create an application**](https://apps.twitter.com/app/new) for that!\n\n<span style=\"color:red\">**Super IMPORTANT**</span>: After having filled in the right information click on **Apply** to authenticate and start streaming. <span style=\"color:red\">This will act only ONCE !"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"B7C73F3F9E7544D98AE20C31FF104773"},"cell_type":"code","source":"import scala.language.postfixOps\nvar alreadyApplied = false\nval form = Form[List[String]](\n  List(\"<consumer key>\", \"<consumer secret>\", \"<token>\", \"<token secret>\"), \n  \"Set Twitter App Auth. and Start Streaming\", \n  paramsToData = m => m.toList.sortBy(_._1).map(_._2), \n  dataToParams = l => List(\"consumerKey\", \"consumerSecret\", \"token\", \"tokenSecret\") zip l toMap, \n  true, false\n) { l =>\n  if (!alreadyApplied) {\n    alreadyApplied = true\n\n    val List(consumerKey, consumerSecret, token, tokenSecret) = l\n    twitterStream.setOAuthConsumer(consumerKey, consumerSecret);\n    twitterStream.setOAuthAccessToken(new auth.AccessToken(token, tokenSecret));\n    \n    twitterStream.sample()\n  }\n}\nform","outputs":[{"name":"stdout","output_type":"stream","text":"import scala.language.postfixOps\nalreadyApplied: Boolean = false\nform: notebook.front.widgets.Form[List[String]] = <anon$1 widget>\nres39: notebook.front.widgets.Form[List[String]] = <anon$1 widget>\n"},{"metadata":{},"data":{"text/html":"<div><script data-this=\"{&quot;valueId&quot;:&quot;anonb730fe849c926adee63587c5847e8f83&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(\n          ['observable', 'knockout', 'jquery'],\n          function (Observable, ko, $) {\n            var value = Observable.makeObservable(valueId);\n            var publishFormData = function(form) {\n              var r = $(form).serializeArray();\n              var result = {};\n              r.forEach(function(o) {\n                result[o.name] = o.value;\n              });\n              value(result);\n            };\n            var addEntry = function(form) {\n              var entry = $(form).serializeArray()[0];\n              $(\"#_c122983a_fe44_417e_a6cb_550add3e5cfc\").find(\"button\")\n                                     .before(\"<div class='form-group'><label for-name='\"+entry.value+\"'>\"+entry.value+\"</label><input class='form-control' name='\"+entry.value+\"' value=''/></div>\")\n            };\n            ko.applyBindings({\n              formShown:        ko.observable(true),\n              value:            value,\n              publishFormData:  publishFormData,\n              addEntry:         addEntry\n            }, this);\n          }\n        )/*]]>*/</script>\n    <span class=\"help-block\">\n      <input type=\"checkbox\" data-bind=\"checked: formShown\"/><strong>Set Twitter App Auth. and Start Streaming</strong>\n    </span>\n    <div data-bind=\"if: formShown\">\n      <form role=\"form\" id=\"_c122983a_fe44_417e_a6cb_550add3e5cfc\" data-bind=\"submit: publishFormData\">\n        <div class=\"form-group\">\n              <label for-name=\"consumerKey\">consumerKey</label>\n              <input name=\"consumerKey\" value=\"&lt;consumer key&gt;\" class=\"form-control\"/>\n            </div><div class=\"form-group\">\n              <label for-name=\"consumerSecret\">consumerSecret</label>\n              <input name=\"consumerSecret\" value=\"&lt;consumer secret&gt;\" class=\"form-control\"/>\n            </div><div class=\"form-group\">\n              <label for-name=\"token\">token</label>\n              <input name=\"token\" value=\"&lt;token&gt;\" class=\"form-control\"/>\n            </div><div class=\"form-group\">\n              <label for-name=\"tokenSecret\">tokenSecret</label>\n              <input name=\"tokenSecret\" value=\"&lt;token secret&gt;\" class=\"form-control\"/>\n            </div>\n        <button type=\"submit\" class=\"btn btn-default\">Apply</button>\n      </form>\n      <form data-bind=\"submit: addEntry\" role=\"form\" class=\"hide\">\n        <div class=\"form-group\">\n          <label for-name=\"add-entry\">Add entry</label>\n          <input name=\"add-entry\" class=\"form-control\" type=\"text\"/>\n        </div>\n        <button type=\"submit\" class=\"btn btn-default\">Add</button>\n      </form>\n    </div>\n  </div>"},"output_type":"execute_result","execution_count":14}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"1CF55900204240C992F6F945E4328161"},"cell_type":"code","source":"//shutdown stream\ntwitterStream.shutdown","outputs":[{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":13}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true,"id":"593ED6186D0640F4A6AB6D0C0D2537F7"},"cell_type":"code","source":"","outputs":[]}],"nbformat":4}