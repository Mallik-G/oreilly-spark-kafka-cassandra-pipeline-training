{"metadata":{"name":"Client example","user_save_timestamp":"1970-01-01T00:00:00.000Z","auto_save_timestamp":"1970-01-01T00:00:00.000Z","language_info":{"name":"scala","file_extension":"scala","codemirror_mode":"text/x-scala"},"trusted":true,"customLocalRepo":"/root/.ivy2","customRepos":["lightbend % default % http://repo.typesafe.com/typesafe/releases % maven"],"customDeps":null,"customImports":null,"customArgs":null,"customSparkConf":null},"cells":[{"metadata":{"id":"B4E11A55B5734E7CB1CF2EFA8B8FC672"},"cell_type":"markdown","source":"# Client for JPM"},{"metadata":{"id":"E5A69BC65F77482982596536F60A5E56"},"cell_type":"markdown","source":"## Setup"},{"metadata":{"id":"324A607613D0499184FFA03C141B3A9B"},"cell_type":"markdown","source":"Stop the spark context, we won't use it here."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"6E22490D9798405DBC456AE2190EAC26"},"cell_type":"code","source":"sparkContext.stop()","outputs":[]},{"metadata":{"id":"4FF7AAFC8A5D4A3CA03C3430CA004E08"},"cell_type":"markdown","source":"## Issue requests on both services"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"0C26BB365F5F4F9A9F87A8D3E4C6FDE0"},"cell_type":"code","source":"def getData:(Double, Double) = {\n  val jpm = scala.io.Source.fromURL(\"http://localhost:2222/jpm\").getLines.toList.head.tail.init.toDouble\n  val prediction = scala.io.Source.fromURL(\"http://localhost:1111/predict\")\n                        .getLines.toList.head.tail.init.toDouble\n  (jpm, prediction)\n}","outputs":[]},{"metadata":{"id":"79282D96818242EF873B3223072340EC"},"cell_type":"markdown","source":"## Plot <small>(dashboard-ish)</small>"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"presentation":{"tabs_state":"{\n  \"tab_id\": \"#tab1814331103-0\"\n}","pivot_chart_state":"{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"},"id":"1DDDB637BD78466182786BDEBA67EA94"},"cell_type":"code","source":"val currentValue = out\nval currentPrediction = out\nval lc = LineChart(Seq(0d))\ncontainerFluid(List(\n  List(\n    (text(\"Current Value\"), 2),\n    (text(\"Current Prediction\"), 2),\n    (text(\"Error\"), 8)\n  ),\n  List(\n    (currentValue, 2),\n    (currentPrediction, 2),\n    (lc, 8)\n  )\n))","outputs":[]},{"metadata":{"id":"11BB377E92274387B67A8E073D51C66C"},"cell_type":"markdown","source":"## Manual test"},{"metadata":{"id":"CE55DF7C2C574929881F609AAE25B764"},"cell_type":"markdown","source":"The following will execute the requests once and update the plots accordingly."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"B4D3B88B91674B738E8D28168FED21A4"},"cell_type":"code","source":"// manual check\nval (v, p) = getData\ncurrentValue(\"\"+v)\ncurrentPrediction(\"\"+p)\nlc.addAndApply(Seq(p-v), true)","outputs":[]},{"metadata":{"id":"3819B6C04D8C42669ECF9A2763ACBD8B"},"cell_type":"markdown","source":"## Make it live"},{"metadata":{"id":"E0734E6B609046A781DF59C3D8520432"},"cell_type":"markdown","source":"The following will issue continually requests to both services.\n\n> **IMPORTANT**: However, since the current docker has very limited resources and we're using spark to retrieve information from cassandra and to predict the machine is under heavy stress that could kill the services... \n> So use it with cautious, check the services' kernel are restart them if necessary.\n>\n> **Another** option is to simply reduce the amount of data in cassandra (see noteb below)"},{"metadata":{"id":"00646856461344A7B8AE29F2E9A81A1E"},"cell_type":"markdown","source":"> **Note**: Since we're expecting new values to come here, in the case we're using the simulator and it reached its end (no more data in the file) then no new data will come in. \n>\n> If you cannot use the real Yahoo consumer (because the markets are closed for instance) then you can rerun the `Simulator` and the `kafka to cassandra` notebooks."},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"68910B0EE7244C618358493A893B325C"},"cell_type":"code","source":"var sleep = 1000l\nimport scala.concurrent.ExecutionContext.Implicits.global\nscala.concurrent.Future {\n  while(sleep != 0) {\n    val (v, p) = getData\n    currentValue(\"\"+v)\n    currentPrediction(\"\"+p)\n    lc.addAndApply(Seq(p-v), true)\n    Thread.sleep(sleep)\n  } \n}\n\n\nForm(\n  sleep,\n  \"Tune the sleep\",\n  (m:Map[String, String]) => m(\"sleep\").toLong,\n  (l:Long) => Map(\"sleep\" â†’ s\"$l\")\n) { l => sleep = l }","outputs":[]}],"nbformat":4}